//--------------------------------------------------------------------------
// File:    PrimeFinder.cs
// Content:	Implementation of class PrimeFinder
// Author:	Andreas Börcsök
// Website:	http://www.smartexpert.de
// Copyright © 2010 Andreas Börcsök
//--------------------------------------------------------------------------
#region Using directives
using System;
using System.Linq;
using SmartExpert;
using SmartExpert.Linq;


#endregion

namespace SmartExpert
{
	///<summary>Prime number finder helper class.</summary>
	public class PrimeFinder
	{
		private static readonly int[] InternalPrimeCapacities = new [] { 
			0x7fffffff, 5, 11, 0x17, 0x2f, 0x61, 0xc5, 0x18d, 0x31d, 0x63d, 0xc83, 0x1915, 0x3235, 0x6475, 0xc8ed, 0x191dd, 
			0x323bf, 0x64787, 0xc8f4d, 0x191e9d, 0x323d49, 0x647a97, 0xc8f539, 0x191ea81, 0x323d521, 0x647aa43, 0xc8f5489, 0x191ea927, 0x323d525b, 0x647aa4bf, 0x1b1, 0x36d, 
			0x6df, 0xdc7, 0x1b91, 0x373f, 0x6e81, 0xdd0f, 0x1ba25, 0x3744b, 0x6e897, 0xdd14f, 0x1ba2a3, 0x37454b, 0x6e8a99, 0xdd1563, 0x1ba2ac7, 0x374559b, 
			0x6e8ab8b, 0xdd1572b, 0x1ba2ae79, 0x37455d1b, 0x6e8aba45, 0x3b9, 0x773, 0xeed, 0x1ddb, 0x3bb7, 0x7771, 0xeef1, 0x1ddeb, 0x3bbdf, 0x777bf, 0xeef85, 
			0x1ddf13, 0x3bbe4d, 0x777cad, 0xeef96f, 0x1ddf2f3, 0x3bbe5ed, 0x777cbdb, 0xeef97cb, 0x1ddf2f9b, 0x3bbe5f3b, 0x777cbe79, 0x40f, 0x821, 0x1051, 0x20ab, 0x4159, 
			0x82b5, 0x1056b, 0x20add, 0x415c1, 0x82bb9, 0x105785, 0x20af19, 0x415e3b, 0x82bc79, 0x10578f7, 0x20af203, 0x415e415, 0x82bc82d, 0x1057909f, 0x20af2147, 0x415e428f, 
			0x1f, 0x43, 0x89, 0x115, 0x22d, 0x45d, 0x8bd, 0x1181, 0x2303, 0x4609, 0x8c17, 0x1183d, 0x2307b, 0x460fd, 0x8c201, 0x118411, 
			0x230833, 0x461069, 0x8c20e1, 0x11841cb, 0x2308397, 0x461075b, 0x8c20ecb, 0x11841da5, 0x23083b61, 0x461076c7, 0x257, 0x4b1, 0x96b, 0x12df, 0x25cd, 0x4bad, 
			0x975b, 0x12ec5, 0x25d93, 0x4bb41, 0x9768b, 0x12ed29, 0x25da59, 0x4bb4b3, 0x976975, 0x12ed2ef, 0x25da5ef, 0x4bb4bed, 0x97697dd, 0x12ed2fbd, 0x25da5f7b, 0x4bb4bf6b, 
			0x137, 0x277, 0x4fd, 0x9fd, 0x13ff, 0x2803, 0x501b, 0xa039, 0x14075, 0x280f9, 0x50215, 0xa042d, 0x140863, 0x2810e1, 0x5021c9, 0xa04395, 
			0x1408739, 0x2810e79, 0x5021d05, 0xa043a0b, 0x14087417, 0x2810e841, 0x5021d089, 3, 7, 0x11, 0x25, 0x4f, 0xa3, 0x14b, 0x2a1, 0x551, 
			0xaa9, 0x155f, 0x2ac5, 0x5597, 0xab4d, 0x156a7, 0x2ad57, 0x55ab3, 0xab57b, 0x156af9, 0x2ad607, 0x55ac41, 0xab5893, 0x156b12f, 0x2ad6285, 0x55ac519, 
			0xab58a35, 0x156b14a3, 0x2ad62961, 0x55ac52c5, 0x2b, 0x59, 0xb3, 0x167, 0x2cf, 0x59f, 0xb3f, 0x1693, 0x2d3b, 0x5a77, 0xb4f7, 0x169f1, 
			0x2d3eb, 0x5a7e5, 0xb4fd9, 0x169fd3, 0x2d3fad, 0x5a7f87, 0xb4ff1f, 0x169fe4d, 0x2d3fca1, 0x5a7f95b, 0xb4ff2b9, 0x169fe58d, 0x2d3fcb1b, 0x5a7f9637, 0x17b, 0x2f9, 
			0x5f3, 0xbe9, 0x17d5, 0x2fab, 0x5f57, 0xbeb1, 0x17d71, 0x2faef, 0x5f5f7, 0xbebf5, 0x17d7f3, 0x2fb009, 0x5f6029, 0xbec0b1, 0x17d8195, 0x2fb0337, 
			0x5f60687, 0xbec0d15, 0x17d81a33, 0x2fb03481, 0x5f606903
		};
		/// <summary>
		/// Table of prime numbers from 2 to 10000 (9973)
		/// </summary>
		public static readonly int[] Table = new [] { 
			2, 3, 5, 7, 11, 13, 0x11, 0x13, 0x17, 0x1d, 0x1f, 0x25, 0x29, 0x2b, 0x2f, 0x35, 
			0x3b, 0x3d, 0x43, 0x47, 0x49, 0x4f, 0x53, 0x59, 0x61, 0x65, 0x67, 0x6b, 0x6d, 0x71, 0x7f, 0x83, 
			0x89, 0x8b, 0x95, 0x97, 0x9d, 0xa3, 0xa7, 0xad, 0xb3, 0xb5, 0xbf, 0xc1, 0xc5, 0xc7, 0xd3, 0xdf, 
			0xe3, 0xe5, 0xe9, 0xef, 0xf1, 0xfb, 0x101, 0x107, 0x10d, 0x10f, 0x115, 0x119, 0x11b, 0x125, 0x133, 0x137, 
			0x139, 0x13d, 0x14b, 0x151, 0x15b, 0x15d, 0x161, 0x167, 0x16f, 0x175, 0x17b, 0x17f, 0x185, 0x18d, 0x191, 0x199, 
			0x1a3, 0x1a5, 0x1af, 0x1b1, 0x1b7, 0x1bb, 0x1c1, 0x1c9, 0x1cd, 0x1cf, 0x1d3, 0x1df, 0x1e7, 0x1eb, 0x1f3, 0x1f7, 
			0x1fd, 0x209, 0x20b, 0x21d, 0x223, 0x22d, 0x233, 0x239, 0x23b, 0x241, 0x24b, 0x251, 0x257, 0x259, 0x25f, 0x265, 
			0x269, 0x26b, 0x277, 0x281, 0x283, 0x287, 0x28d, 0x293, 0x295, 0x2a1, 0x2a5, 0x2ab, 0x2b3, 0x2bd, 0x2c5, 0x2cf, 
			0x2d7, 0x2dd, 0x2e3, 0x2e7, 0x2ef, 0x2f5, 0x2f9, 0x301, 0x305, 0x313, 0x31d, 0x329, 0x32b, 0x335, 0x337, 0x33b, 
			0x33d, 0x347, 0x355, 0x359, 0x35b, 0x35f, 0x36d, 0x371, 0x373, 0x377, 0x38b, 0x38f, 0x397, 0x3a1, 0x3a9, 0x3ad, 
			0x3b3, 0x3b9, 0x3c7, 0x3cb, 0x3d1, 0x3d7, 0x3df, 0x3e5, 0x3f1, 0x3f5, 0x3fb, 0x3fd, 0x407, 0x409, 0x40f, 0x419, 
			0x41b, 0x425, 0x427, 0x42d, 0x43f, 0x443, 0x445, 0x449, 0x44f, 0x455, 0x45d, 0x463, 0x469, 0x47f, 0x481, 0x48b, 
			0x493, 0x49d, 0x4a3, 0x4a9, 0x4b1, 0x4bd, 0x4c1, 0x4c7, 0x4cd, 0x4cf, 0x4d5, 0x4e1, 0x4eb, 0x4fd, 0x4ff, 0x503, 
			0x509, 0x50b, 0x511, 0x515, 0x517, 0x51b, 0x527, 0x529, 0x52f, 0x551, 0x557, 0x55d, 0x565, 0x577, 0x581, 0x58f, 
			0x593, 0x595, 0x599, 0x59f, 0x5a7, 0x5ab, 0x5ad, 0x5b3, 0x5bf, 0x5c9, 0x5cb, 0x5cf, 0x5d1, 0x5d5, 0x5db, 0x5e7, 
			0x5f3, 0x5fb, 0x607, 0x60d, 0x611, 0x617, 0x61f, 0x623, 0x62b, 0x62f, 0x63d, 0x641, 0x647, 0x649, 0x64d, 0x653, 
			0x655, 0x65b, 0x665, 0x679, 0x67f, 0x683, 0x685, 0x69d, 0x6a1, 0x6a3, 0x6ad, 0x6b9, 0x6bb, 0x6c5, 0x6cd, 0x6d3, 
			0x6d9, 0x6df, 0x6f1, 0x6f7, 0x6fb, 0x6fd, 0x709, 0x713, 0x71f, 0x727, 0x737, 0x745, 0x74b, 0x74f, 0x751, 0x755, 
			0x757, 0x761, 0x76d, 0x773, 0x779, 0x78b, 0x78d, 0x79d, 0x79f, 0x7b5, 0x7bb, 0x7c3, 0x7c9, 0x7cd, 0x7cf, 0x7d3, 
			0x7db, 0x7e1, 0x7eb, 0x7ed, 0x7f7, 0x805, 0x80f, 0x815, 0x821, 0x823, 0x827, 0x829, 0x833, 0x83f, 0x841, 0x851, 
			0x853, 0x859, 0x85d, 0x85f, 0x869, 0x871, 0x883, 0x89b, 0x89f, 0x8a5, 0x8ad, 0x8bd, 0x8bf, 0x8c3, 0x8cb, 0x8db, 
			0x8dd, 0x8e1, 0x8e9, 0x8ef, 0x8f5, 0x8f9, 0x905, 0x907, 0x91d, 0x923, 0x925, 0x92b, 0x92f, 0x935, 0x943, 0x949, 
			0x94d, 0x94f, 0x955, 0x959, 0x95f, 0x96b, 0x971, 0x977, 0x985, 0x989, 0x98f, 0x99b, 0x9a3, 0x9a9, 0x9ad, 0x9c7, 
			0x9d9, 0x9e3, 0x9eb, 0x9ef, 0x9f5, 0x9f7, 0x9fd, 0xa13, 0xa1f, 0xa21, 0xa31, 0xa39, 0xa3d, 0xa49, 0xa57, 0xa61, 
			0xa63, 0xa67, 0xa6f, 0xa75, 0xa7b, 0xa7f, 0xa81, 0xa85, 0xa8b, 0xa93, 0xa97, 0xa99, 0xa9f, 0xaa9, 0xaab, 0xab5, 
			0xabd, 0xac1, 0xacf, 0xad9, 0xae5, 0xae7, 0xaed, 0xaf1, 0xaf3, 0xb03, 0xb11, 0xb15, 0xb1b, 0xb23, 0xb29, 0xb2d, 
			0xb3f, 0xb47, 0xb51, 0xb57, 0xb5d, 0xb65, 0xb6f, 0xb7b, 0xb89, 0xb8d, 0xb93, 0xb99, 0xb9b, 0xbb7, 0xbb9, 0xbc3, 
			0xbcb, 0xbcf, 0xbdd, 0xbe1, 0xbe9, 0xbf5, 0xbfb, 0xc07, 0xc0b, 0xc11, 0xc25, 0xc2f, 0xc31, 0xc41, 0xc5b, 0xc5f, 
			0xc61, 0xc6d, 0xc73, 0xc77, 0xc83, 0xc89, 0xc91, 0xc95, 0xc9d, 0xcb3, 0xcb5, 0xcb9, 0xcbb, 0xcc7, 0xce3, 0xce5, 
			0xceb, 0xcf1, 0xcf7, 0xcfb, 0xd01, 0xd03, 0xd0f, 0xd13, 0xd1f, 0xd21, 0xd2b, 0xd2d, 0xd3d, 0xd3f, 0xd4f, 0xd55, 
			0xd69, 0xd79, 0xd81, 0xd85, 0xd87, 0xd8b, 0xd8d, 0xda3, 0xdab, 0xdb7, 0xdbd, 0xdc7, 0xdc9, 0xdcd, 0xdd3, 0xdd5, 
			0xddb, 0xde5, 0xde7, 0xdf3, 0xdfd, 0xdff, 0xe09, 0xe17, 0xe1d, 0xe21, 0xe27, 0xe2f, 0xe35, 0xe3b, 0xe4b, 0xe57, 
			0xe59, 0xe5d, 0xe6b, 0xe71, 0xe75, 0xe7d, 0xe87, 0xe8f, 0xe95, 0xe9b, 0xeb1, 0xeb7, 0xeb9, 0xec3, 0xed1, 0xed5, 
			0xedb, 0xeed, 0xeef, 0xef9, 0xf07, 0xf0b, 0xf0d, 0xf17, 0xf25, 0xf29, 0xf31, 0xf43, 0xf47, 0xf4d, 0xf4f, 0xf53, 
			0xf59, 0xf5b, 0xf67, 0xf6b, 0xf7f, 0xf95, 0xfa1, 0xfa3, 0xfa7, 0xfad, 0xfb3, 0xfb5, 0xfbb, 0xfd1, 0xfd3, 0xfd9, 
			0xfe9, 0xfef, 0xffb, 0xffd, 0x1003, 0x100f, 0x101f, 0x1021, 0x1025, 0x102b, 0x1039, 0x103d, 0x103f, 0x1051, 0x1069, 0x1073, 
			0x1079, 0x107b, 0x1085, 0x1087, 0x1091, 0x1093, 0x109d, 0x10a3, 0x10a5, 0x10af, 0x10b1, 0x10bb, 0x10c1, 0x10c9, 0x10e7, 0x10f1, 
			0x10f3, 0x10fd, 0x1105, 0x110b, 0x1115, 0x1127, 0x112d, 0x1139, 0x1145, 0x1147, 0x1159, 0x115f, 0x1163, 0x1169, 0x116f, 0x1181, 
			0x1183, 0x118d, 0x119b, 0x11a1, 0x11a5, 0x11a7, 0x11ab, 0x11c3, 0x11c5, 0x11d1, 0x11d7, 0x11e7, 0x11ef, 0x11f5, 0x11fb, 0x120d, 
			0x121d, 0x121f, 0x1223, 0x1229, 0x122b, 0x1231, 0x1237, 0x1241, 0x1247, 0x1253, 0x125f, 0x1271, 0x1273, 0x1279, 0x127d, 0x128f, 
			0x1297, 0x12af, 0x12b3, 0x12b5, 0x12b9, 0x12bf, 0x12c1, 0x12cd, 0x12d1, 0x12df, 0x12fd, 0x1307, 0x130d, 0x1319, 0x1327, 0x132d, 
			0x1337, 0x1343, 0x1345, 0x1349, 0x134f, 0x1357, 0x135d, 0x1367, 0x1369, 0x136d, 0x137b, 0x1381, 0x1387, 0x138b, 0x1391, 0x1393, 
			0x139d, 0x139f, 0x13af, 0x13bb, 0x13c3, 0x13d5, 0x13d9, 0x13df, 0x13eb, 0x13ed, 0x13f3, 0x13f9, 0x13ff, 0x141b, 0x1421, 0x142f, 
			0x1433, 0x143b, 0x1445, 0x144d, 0x1459, 0x146b, 0x146f, 0x1471, 0x1475, 0x148d, 0x1499, 0x149f, 0x14a1, 0x14b1, 0x14b7, 0x14bd, 
			0x14cb, 0x14d5, 0x14e3, 0x14e7, 0x1505, 0x150b, 0x1511, 0x1517, 0x151f, 0x1525, 0x1529, 0x152b, 0x1537, 0x153d, 0x1541, 0x1543, 
			0x1549, 0x155f, 0x1565, 0x1567, 0x156b, 0x157d, 0x157f, 0x1583, 0x158f, 0x1591, 0x1597, 0x159b, 0x15b5, 0x15bb, 0x15c1, 0x15c5, 
			0x15cd, 0x15d7, 0x15f7, 0x1607, 0x1609, 0x160f, 0x1613, 0x1615, 0x1619, 0x161b, 0x1625, 0x1633, 0x1639, 0x163d, 0x1645, 0x164f, 
			0x1655, 0x1669, 0x166d, 0x166f, 0x1675, 0x1693, 0x1697, 0x169f, 0x16a9, 0x16af, 0x16b5, 0x16bd, 0x16c3, 0x16cf, 0x16d3, 0x16d9, 
			0x16db, 0x16e1, 0x16e5, 0x16eb, 0x16ed, 0x16f7, 0x16f9, 0x1709, 0x170f, 0x1723, 0x1727, 0x1733, 0x1741, 0x175d, 0x1763, 0x1777, 
			0x177b, 0x178d, 0x1795, 0x179b, 0x179f, 0x17a5, 0x17b3, 0x17b9, 0x17bf, 0x17c9, 0x17cb, 0x17d5, 0x17e1, 0x17e9, 0x17f3, 0x17f5, 
			0x17ff, 0x1807, 0x1813, 0x181d, 0x1835, 0x1837, 0x183b, 0x1843, 0x1849, 0x184d, 0x1855, 0x1867, 0x1871, 0x1877, 0x187d, 0x187f, 
			0x1885, 0x188f, 0x189b, 0x189d, 0x18a7, 0x18ad, 0x18b3, 0x18b9, 0x18c1, 0x18c7, 0x18d1, 0x18d7, 0x18d9, 0x18df, 0x18e5, 0x18eb, 
			0x18f5, 0x18fd, 0x1915, 0x191b, 0x1931, 0x1933, 0x1945, 0x1949, 0x1951, 0x195b, 0x1979, 0x1981, 0x1993, 0x1997, 0x1999, 0x19a3, 
			0x19a9, 0x19ab, 0x19b1, 0x19b5, 0x19c7, 0x19cf, 0x19db, 0x19ed, 0x19fd, 0x1a03, 0x1a05, 0x1a11, 0x1a17, 0x1a21, 0x1a23, 0x1a2d, 
			0x1a2f, 0x1a35, 0x1a3f, 0x1a4d, 0x1a51, 0x1a69, 0x1a6b, 0x1a7b, 0x1a7d, 0x1a87, 0x1a89, 0x1a93, 0x1aa7, 0x1aab, 0x1aad, 0x1ab1, 
			0x1ab9, 0x1ac9, 0x1acf, 0x1ad5, 0x1ad7, 0x1ae3, 0x1af3, 0x1afb, 0x1aff, 0x1b05, 0x1b23, 0x1b25, 0x1b2f, 0x1b31, 0x1b37, 0x1b3b, 
			0x1b41, 0x1b47, 0x1b4f, 0x1b55, 0x1b59, 0x1b65, 0x1b6b, 0x1b73, 0x1b7f, 0x1b83, 0x1b91, 0x1b9d, 0x1ba7, 0x1bbf, 0x1bc5, 0x1bd1, 
			0x1bd7, 0x1bd9, 0x1bef, 0x1bf7, 0x1c09, 0x1c13, 0x1c19, 0x1c27, 0x1c2b, 0x1c2d, 0x1c33, 0x1c3d, 0x1c45, 0x1c4b, 0x1c4f, 0x1c55, 
			0x1c73, 0x1c81, 0x1c8b, 0x1c8d, 0x1c99, 0x1ca3, 0x1ca5, 0x1cb5, 0x1cb7, 0x1cc9, 0x1ce1, 0x1cf3, 0x1cf9, 0x1d09, 0x1d1b, 0x1d21, 
			0x1d23, 0x1d35, 0x1d39, 0x1d3f, 0x1d41, 0x1d4b, 0x1d53, 0x1d5d, 0x1d63, 0x1d69, 0x1d71, 0x1d75, 0x1d7b, 0x1d7d, 0x1d87, 0x1d89, 
			0x1d95, 0x1d99, 0x1d9f, 0x1da5, 0x1da7, 0x1db3, 0x1db7, 0x1dc5, 0x1dd7, 0x1ddb, 0x1de1, 0x1df5, 0x1df9, 0x1e01, 0x1e07, 0x1e0b, 
			0x1e13, 0x1e17, 0x1e25, 0x1e2b, 0x1e2f, 0x1e3d, 0x1e49, 0x1e4d, 0x1e4f, 0x1e6d, 0x1e71, 0x1e89, 0x1e8f, 0x1e95, 0x1ea1, 0x1ead, 
			0x1ebb, 0x1ec1, 0x1ec5, 0x1ec7, 0x1ecb, 0x1edd, 0x1ee3, 0x1eef, 0x1ef7, 0x1efd, 0x1f01, 0x1f0d, 0x1f0f, 0x1f1b, 0x1f39, 0x1f49, 
			0x1f4b, 0x1f51, 0x1f67, 0x1f75, 0x1f7b, 0x1f85, 0x1f91, 0x1f97, 0x1f99, 0x1f9d, 0x1fa5, 0x1faf, 0x1fb5, 0x1fbb, 0x1fd3, 0x1fe1, 
			0x1fe7, 0x1feb, 0x1ff3, 0x1fff, 0x2011, 0x201b, 0x201d, 0x2027, 0x2029, 0x202d, 0x2033, 0x2047, 0x204d, 0x2051, 0x205f, 0x2063, 
			0x2065, 0x2069, 0x2077, 0x207d, 0x2089, 0x20a1, 0x20ab, 0x20b1, 0x20b9, 0x20c3, 0x20c5, 0x20e3, 0x20e7, 0x20ed, 0x20ef, 0x20fb, 
			0x20ff, 0x210d, 0x2113, 0x2135, 0x2141, 0x2149, 0x214f, 0x2159, 0x215b, 0x215f, 0x2173, 0x217d, 0x2185, 0x2195, 0x2197, 0x21a1, 
			0x21af, 0x21b3, 0x21b5, 0x21c1, 0x21c7, 0x21d7, 0x21dd, 0x21e5, 0x21e9, 0x21f1, 0x21f5, 0x21fb, 0x2203, 0x2209, 0x220f, 0x221b, 
			0x2221, 0x2225, 0x222b, 0x2231, 0x2239, 0x224b, 0x224f, 0x2263, 0x2267, 0x2273, 0x2275, 0x227f, 0x2285, 0x2287, 0x2291, 0x229d, 
			0x229f, 0x22a3, 0x22b7, 0x22bd, 0x22db, 0x22e1, 0x22e5, 0x22ed, 0x22f7, 0x2303, 0x2309, 0x230b, 0x2327, 0x2329, 0x232f, 0x2333, 
			0x2335, 0x2345, 0x2351, 0x2353, 0x2359, 0x2363, 0x236b, 0x2383, 0x238f, 0x2395, 0x23a7, 0x23ad, 0x23b1, 0x23bf, 0x23c5, 0x23c9, 
			0x23d5, 0x23dd, 0x23e3, 0x23ef, 0x23f3, 0x23f9, 0x2405, 0x240b, 0x2417, 0x2419, 0x2429, 0x243d, 0x2441, 0x2443, 0x244d, 0x245f, 
			0x2467, 0x246b, 0x2479, 0x247d, 0x247f, 0x2485, 0x249b, 0x24a1, 0x24af, 0x24b5, 0x24bb, 0x24c5, 0x24cb, 0x24cd, 0x24d7, 0x24d9, 
			0x24dd, 0x24df, 0x24f5, 0x24f7, 0x24fb, 0x2501, 0x2507, 0x2513, 0x2519, 0x2527, 0x2531, 0x253d, 0x2543, 0x254b, 0x254f, 0x2573, 
			0x2581, 0x258d, 0x2593, 0x2597, 0x259d, 0x259f, 0x25ab, 0x25b1, 0x25bd, 0x25cd, 0x25cf, 0x25d9, 0x25e1, 0x25f7, 0x25f9, 0x2605, 
			0x260b, 0x260f, 0x2615, 0x2627, 0x2629, 0x2635, 0x263b, 0x263f, 0x264b, 0x2653, 0x2659, 0x2665, 0x2669, 0x266f, 0x267b, 0x2681, 
			0x2683, 0x268f, 0x269b, 0x269f, 0x26ad, 0x26b3, 0x26c3, 0x26c9, 0x26cb, 0x26d5, 0x26dd, 0x26ef, 0x26f5
		};

		static PrimeFinder()
		{
			Array.Sort(InternalPrimeCapacities);
		}

		/// <summary>
		/// Returns a prime number which is <code>&gt;= desiredCapacity</code>
		/// and very close to <code>desiredCapacity</code> (within 11% if
		/// <code>desiredCapacity &gt;= 1000</code>).
		/// </summary>
		/// <param name="desiredCapacity">The capacity desired by the user</param>
		/// <returns>The capacity which should be used for a hashtable.</returns>
		public static int NextPrime(int desiredCapacity)
		{
			int index = Array.BinarySearch(InternalPrimeCapacities, desiredCapacity);
			if (index < 0)
			{
				index = -index - 1;
			}
			return InternalPrimeCapacities[index];
		}

		/// <summary>
		/// Determines whether the specified candidate is a prime number.
		/// </summary>
		/// <param name="candidate">The candidate.</param>
		/// <returns>
		///   <see langword="true"/> if the specified candidate is prime; otherwise, <see langword="false"/>.
		/// </returns>
		public static bool IsPrime(int candidate)
		{
			if ((candidate & 1) == 0)
			{
				return (candidate == 2);
			}

			if (candidate <= 0x26f5)
				return Table.Contains(candidate);

			var num = (int)Math.Sqrt(candidate);
			for (var i = 3; i <= num; i += 2)
			{
				if ((candidate % i) != 0) continue;
				return false;
			}
			return true;
		}

	}

}
